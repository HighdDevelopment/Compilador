Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> ROBOT_R var_def PROCS
Rule 2     prog -> ROBOT_R var_def PROCS put_def
Rule 3     var_def -> VARS ID_list SEMICOLON
Rule 4     ID_list -> ID
Rule 5     ID_list -> ID_list COMMA ID
Rule 6     put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA RBRACKET
Rule 7     put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA assignTo_def RBRACKET
Rule 8     assignTo_def -> assignTo DOSPUNTOS INTEGER COMMA ID SEMICOLON

Terminals, with rules where they appear

COMMA                : 5 6 7 8
DOSPUNTOS            : 8
ID                   : 4 5 6 6 7 7 8
INTEGER              : 8
LBRACKET             : 6 7
PLECA                : 6 6 7 7
PROCS                : 1 2
PUT                  : 6 7
RBRACKET             : 6 7
ROBOT_R              : 1 2
SEMICOLON            : 3 8
VARS                 : 3
assignTo             : 8
error                : 

Nonterminals, with rules where they appear

ID_list              : 3 5
assignTo_def         : 7
prog                 : 0
put_def              : 2
var_def              : 1 2

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . ROBOT_R var_def PROCS
    (2) prog -> . ROBOT_R var_def PROCS put_def

    ROBOT_R         shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> ROBOT_R . var_def PROCS
    (2) prog -> ROBOT_R . var_def PROCS put_def
    (3) var_def -> . VARS ID_list SEMICOLON

    VARS            shift and go to state 4

    var_def                        shift and go to state 3

state 3

    (1) prog -> ROBOT_R var_def . PROCS
    (2) prog -> ROBOT_R var_def . PROCS put_def

    PROCS           shift and go to state 5


state 4

    (3) var_def -> VARS . ID_list SEMICOLON
    (4) ID_list -> . ID
    (5) ID_list -> . ID_list COMMA ID

    ID              shift and go to state 7

    ID_list                        shift and go to state 6

state 5

    (1) prog -> ROBOT_R var_def PROCS .
    (2) prog -> ROBOT_R var_def PROCS . put_def
    (6) put_def -> . PUT LBRACKET PLECA ID COMMA ID PLECA RBRACKET
    (7) put_def -> . PUT LBRACKET PLECA ID COMMA ID PLECA assignTo_def RBRACKET

    $end            reduce using rule 1 (prog -> ROBOT_R var_def PROCS .)
    PUT             shift and go to state 9

    put_def                        shift and go to state 8

state 6

    (3) var_def -> VARS ID_list . SEMICOLON
    (5) ID_list -> ID_list . COMMA ID

    SEMICOLON       shift and go to state 10
    COMMA           shift and go to state 11


state 7

    (4) ID_list -> ID .

    SEMICOLON       reduce using rule 4 (ID_list -> ID .)
    COMMA           reduce using rule 4 (ID_list -> ID .)


state 8

    (2) prog -> ROBOT_R var_def PROCS put_def .

    $end            reduce using rule 2 (prog -> ROBOT_R var_def PROCS put_def .)


state 9

    (6) put_def -> PUT . LBRACKET PLECA ID COMMA ID PLECA RBRACKET
    (7) put_def -> PUT . LBRACKET PLECA ID COMMA ID PLECA assignTo_def RBRACKET

    LBRACKET        shift and go to state 12


state 10

    (3) var_def -> VARS ID_list SEMICOLON .

    PROCS           reduce using rule 3 (var_def -> VARS ID_list SEMICOLON .)


state 11

    (5) ID_list -> ID_list COMMA . ID

    ID              shift and go to state 13


state 12

    (6) put_def -> PUT LBRACKET . PLECA ID COMMA ID PLECA RBRACKET
    (7) put_def -> PUT LBRACKET . PLECA ID COMMA ID PLECA assignTo_def RBRACKET

    PLECA           shift and go to state 14


state 13

    (5) ID_list -> ID_list COMMA ID .

    SEMICOLON       reduce using rule 5 (ID_list -> ID_list COMMA ID .)
    COMMA           reduce using rule 5 (ID_list -> ID_list COMMA ID .)


state 14

    (6) put_def -> PUT LBRACKET PLECA . ID COMMA ID PLECA RBRACKET
    (7) put_def -> PUT LBRACKET PLECA . ID COMMA ID PLECA assignTo_def RBRACKET

    ID              shift and go to state 15


state 15

    (6) put_def -> PUT LBRACKET PLECA ID . COMMA ID PLECA RBRACKET
    (7) put_def -> PUT LBRACKET PLECA ID . COMMA ID PLECA assignTo_def RBRACKET

    COMMA           shift and go to state 16


state 16

    (6) put_def -> PUT LBRACKET PLECA ID COMMA . ID PLECA RBRACKET
    (7) put_def -> PUT LBRACKET PLECA ID COMMA . ID PLECA assignTo_def RBRACKET

    ID              shift and go to state 17


state 17

    (6) put_def -> PUT LBRACKET PLECA ID COMMA ID . PLECA RBRACKET
    (7) put_def -> PUT LBRACKET PLECA ID COMMA ID . PLECA assignTo_def RBRACKET

    PLECA           shift and go to state 18


state 18

    (6) put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA . RBRACKET
    (7) put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA . assignTo_def RBRACKET
    (8) assignTo_def -> . assignTo DOSPUNTOS INTEGER COMMA ID SEMICOLON

    RBRACKET        shift and go to state 19
    assignTo        shift and go to state 21

    assignTo_def                   shift and go to state 20

state 19

    (6) put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA RBRACKET .

    $end            reduce using rule 6 (put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA RBRACKET .)


state 20

    (7) put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA assignTo_def . RBRACKET

    RBRACKET        shift and go to state 22


state 21

    (8) assignTo_def -> assignTo . DOSPUNTOS INTEGER COMMA ID SEMICOLON

    DOSPUNTOS       shift and go to state 23


state 22

    (7) put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA assignTo_def RBRACKET .

    $end            reduce using rule 7 (put_def -> PUT LBRACKET PLECA ID COMMA ID PLECA assignTo_def RBRACKET .)


state 23

    (8) assignTo_def -> assignTo DOSPUNTOS . INTEGER COMMA ID SEMICOLON

    INTEGER         shift and go to state 24


state 24

    (8) assignTo_def -> assignTo DOSPUNTOS INTEGER . COMMA ID SEMICOLON

    COMMA           shift and go to state 25


state 25

    (8) assignTo_def -> assignTo DOSPUNTOS INTEGER COMMA . ID SEMICOLON

    ID              shift and go to state 26


state 26

    (8) assignTo_def -> assignTo DOSPUNTOS INTEGER COMMA ID . SEMICOLON

    SEMICOLON       shift and go to state 27


state 27

    (8) assignTo_def -> assignTo DOSPUNTOS INTEGER COMMA ID SEMICOLON .

    RBRACKET        reduce using rule 8 (assignTo_def -> assignTo DOSPUNTOS INTEGER COMMA ID SEMICOLON .)

